#include <iostream>
#include <vector>

int maxSubarraySum(const std::vector<int>& nums) {
    int maxEndingHere = nums[0];  // Max sum ending at the current position
    int maxSoFar = nums[0];      // Max sum found so far

    for (int i = 1; i < nums.size(); i++) {
        // Calculate the maximum sum ending at the current position
        maxEndingHere = std::max(nums[i], maxEndingHere + nums[i]);

        // Update the maximum sum found so far
        maxSoFar = std::max(maxSoFar, maxEndingHere);
    }

    return maxSoFar;
}

int main() {
    std::vector<int> nums = { -2, 1, -3, 4, -1, 2, 1, -5, 4 };
    int maxSum = maxSubarraySum(nums);
    std::cout << "Maximum Subarray Sum: " << maxSum << std::endl;
    return 0;
}
